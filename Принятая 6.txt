#include <iostream>
#include <cmath>
#include <sstream>
#include <cstring>
#include <string>
#include <locale.h>
#define co cout << endl;
#define PI 3.14159265
using namespace std;
static const int MAX_LENGTH = 100;

class Array {
protected:
    char arr[MAX_LENGTH];
    int count = 0;
public:
    Array() {};
    Array(int Count) {
        if(Count > 0 && Count < 101){
            for (int i = 0; i < Count; i++)
                arr[i] = '0';
            count = Count;
        }
        else { 
            cout << "Введено недопустимое значение";
            exit(0);
        }
    
    };
    virtual Array sum_arr(Array A, Array B) {
        return 0;
    }
    char& operator[] (int index){
        return arr[index];
    }
    int get_c() const {
        return count;
    }
    void put_c(int x){
        count = x;
    }
    Array count_in(int x) {
        count = x;
        return *this;
    }
};

class BitString : public Array{
public:
    BitString() {};
    BitString(int Count): Array(Count){};
    virtual BitString sum_arr(BitString A){
        BitString C;
        int flag = 0;
        if (A.get_c() >= get_c())
            C.count_in(A.get_c());
        else {
            C.count_in(get_c());
            flag = 1;
        }
        if (flag == 0)
            for (int i = 0; i < A.get_c(); i++)
            {
                if ((A[i] == '0') && (arr[i] == '0'))
                {
                    C[i] = '0';
                }
                else
                {
                    C[i] = '1';
                }
            }
        if (flag == 1)
        {
            if (flag == 0)
                for (int i = 0; i < A.get_c(); i++)
                {
                    if ((A[i] == '0') && (arr[i] == '0'))
                    {
                        C[i] = '0';
                    }
                    else
                    {
                        C[i] = '1';
                    }
                }
        }
        return C;
    }
    
    friend ostream& operator<<(ostream& t, BitString A);
};
istream & operator>>(istream &is, BitString& A){
        for (int i = A.get_c() - 1; i >= 0; i--) {
            is >> A[i];
            if(A[i]!='0' && A[i]!='1'){
                cout << "Введите бит заного: ";
                is >> A[i];
            }
        }
        return is;
    }
ostream& operator<<(ostream& t, BitString A) {
    if (A.get_c() == 0)
    {
        cout << "Битовой строки нет" << endl;
    }
    else {
        for (int i = 0; i < A.get_c(); i++)
            cout << A[i];
    }
    return t;
}
BitString OR(BitString A, BitString B){
    BitString C;
    int flag = 0;
    if (A.get_c() >= B.get_c())
        C.count_in(A.get_c());
    else {
        C.count_in(B.get_c());
        flag = 1;
    }
    if (flag == 0)
        for (int i = 0; i < A.get_c(); i++)
        {
            if ((A[i] == '0') && (B[i] == '0'))
            {
                C[i] = '0';
            }
            else
            {
                C[i] = '1';
            }
        }
    if (flag == 1)
    {
        if (flag == 0)
            for (int i = 0; i < A.get_c(); i++)
            {
                if ((A[i] == '0') && (B[i] == '0'))
                {
                    C[i] = '0';
                }
                else
                {
                    C[i] = '1';
                }
            }
    }
    return C;
}
BitString AND(BitString A, BitString B){
    BitString C;
    int flag = 0;
    if (A.get_c() >= B.get_c())
        C.count_in(A.get_c());
    else {
        C.count_in(B.get_c());
        flag = 1;
    }
    if (flag == 0)
        for (int i = 0; i < A.get_c(); i++)
        {
            if ((A[i] == '1') && (B[i] == '1'))
            {
                C[i] = '1';
            }
            else
            {
                C[i] = '0';
            }

        }
    if (flag == 1)
        for (int i = 0; i < B.get_c(); i++)
        {
            if ((A[i] == '1') && (B[i] == '1'))
            {
                C[i] = '1';
            }
            else
            {
                C[i] = '0';
            }
        }

    return C;
}
BitString XOR(BitString A, BitString B){
    BitString C;
    int flag = 0;
    if (A.get_c() >= B.get_c())
        C.count_in(A.get_c());
    else {
        C.count_in(B.get_c());
        flag = 1;
    }
    if (flag == 0)
        for (int i = 0; i < A.get_c(); i++)
        {
            if ((A[i] == '0') && (B[i] == '0'))
            {
                C[i] = '0';
            }
            else
            {
                C[i] = '1';
            }
        }
    if (flag == 1)
        for (int i = 0; i < B.get_c(); i++)
        {
            if ((A[i] == '0') && (B[i] == '0'))
            {
                C[i] = '0';
            }
            else
            {
                C[i] = '1';
            }
        }
    return C;
}
BitString NOT(BitString A){
    BitString C;
    C.count_in(A.get_c());
    for (int i = 0; i < A.get_c(); i++)
    {
        if (A[i] == '0')
        {
            C[i] = '1';
        }
        if (A[i] == '1')
        {
            C[i] = '0';
        }

    }
    return C;
}
BitString left_s(BitString A, int x){
    int new_c = A.get_c();
    for(int i = 0; i < x; i++){
        A[A.get_c()+i] = '0';
        new_c++;
    }
    A.count_in(new_c);
    return A;

}
BitString right_s(BitString A, int x){
    A.count_in(A.get_c()-x);
    return A;
}

class String : public Array{
public:
    String() {};
    String(const char* str) {
        count = strlen(str);
        strncpy(arr, str, MAX_LENGTH - 1);
        arr[count] = '\0';
    }
    int length() const {
        return count;
    }
    bool contains(const char* str) const {
        return strstr(arr, str) != nullptr;
    }
    void remove(const char* str) {
        char* found = strstr(arr, str);
        if (found != nullptr) {
            int remove_length = strlen(str);
            int remaining_length = count - (found - arr) - remove_length + 1;
            memmove(found, found + remove_length, remaining_length);
            count -= remove_length;
        }
    }
    void insert(const char* str, int pos) {
        int new_length = strlen(str);
        int tail_length = count - pos + 1;
        int copy_length = min(new_length, MAX_LENGTH - count + 1);

        if (copy_length > 0) {
            memmove(arr + pos + copy_length, arr + pos, tail_length);
            strncpy(arr + pos, str, copy_length);
            count = min(MAX_LENGTH - 1, count + new_length);
        }
    }
    virtual String suma_arr(String St2){
        String St3 = *this;
        if (St3.count + St2.count < MAX_LENGTH) {
            strncpy(St3.arr + St3.count, St2.arr, MAX_LENGTH - St3.count - 1);
            St3.count += St3.count;
            St3.arr[St3.count] = '\0';
        }

        return St3;
    }
    friend ostream& operator<<(ostream& os, const String& str);
};
ostream& operator<<(ostream& os, const String& str) {
    return os << str.arr;
}
int main(){
    setlocale(LC_ALL, "rus");
    int m, n, x = 0;
    float s;
    int Sp;
    cout << "Введите номер класса с которым хотите работать: \n1)BitString;\n2)String\n-->";
    cin >> Sp;
    switch (Sp) {
    case 1:
    {
        int g = 0;
        cout << "Введите кол-во элементов Битовых строк: " << endl;
        cin >> n;
        BitString A(n), B(n);
        cout << "Введите первую битовую строку: ";
        cin >> A;
        cout << "Введите вторую битовую строку: ";
        cin >> B;
        cout << "Первая строка: ";
        cout << A; co
        cout << "Вторая строка: ";
        cout << B; co
        cout << "Сумма строк: " << B.sum_arr(A); co
        cout << "NOT первой строки: " << NOT(A); co
        cout << "XOR: " << XOR(A, B); co
        cout << "OR: " << OR(A, B); co
        cout << "AND: " << AND(A, B); co
        cout << "Введите кол-во битов для сдвига первой строки влево: ";
        cin >> g;
        A = left_s(A, g);
        cout << "Число приняkо вид: " << A; co
        cout << "Введите кол-во битов для сдвига первой строки вправо: ";
        cin >> g;
        A = right_s(A, g);
        cout << "Число приняkо вид: " << A; co
        break;
    }
    case 2:
    {
        int count_st1, count_st2;
        char st1[MAX_LENGTH], st2[MAX_LENGTH];
        cout << "Введите первую строку (на английском): ";
        cin >> st1;
        count_st1 = strlen(st1);
        String St1(st1);
        cout << "Введите вторую строку (на английском): ";
        cin >> st2;
        count_st2 = strlen(st2);
        String St2(st2);
        cout << "Длинна первой строки: " << St1.length() << endl;
        cout << "Длинна второй строки: " << St2.length() << endl;
        cout << "Совпадений \"world\" в первой строке: " << St1.contains("world") << endl;
        St1.remove("world");
        cout << "Удаление слова \"world\" из первой строки: " << St1 << endl;
        St1.insert("everyone", St1.get_c());
        cout << "Вставка слова \"everyone, \" после 6 знака: " << St1 << endl;
        cout << "Объединение двух строк: " << St1.suma_arr(St2) << endl;
        break;
    }

    default: cout << "Неизвестный номер способа";
    }

    return 0;
}